head	1.8;
access;
symbols;
locks
	nvishvkarma:1.8; strict;
comment	@ * @;


1.8
date	2017.02.09.00.53.26;	author root;	state Exp;
branches;
next	1.7;

1.7
date	2017.02.09.00.51.30;	author root;	state Exp;
branches;
next	1.6;

1.6
date	2017.02.01.12.42.10;	author root;	state Exp;
branches;
next	1.5;

1.5
date	2017.01.31.08.03.59;	author root;	state Exp;
branches;
next	1.4;

1.4
date	2017.01.31.08.02.57;	author root;	state Exp;
branches;
next	1.3;

1.3
date	2017.01.25.06.00.18;	author root;	state Exp;
branches;
next	1.2;

1.2
date	2016.07.22.09.41.29;	author root;	state Exp;
branches;
next	1.1;

1.1
date	2016.07.22.09.16.11;	author root;	state Exp;
branches;
next	;


desc
@@


1.8
log
@*** empty log message ***
@
text
@//this is compression  of 3 byte
#include"header.h"
#include"prototype.h"
int compression6(char *m,int l,char *str)
{
	printf("in function------>%s\n",__func__);
	int i=0,fd4,fd2,w,g;
	unsigned int n,count,val,new;
	int loc,d,x,eof;
	unsigned char ch1;
	unsigned char byte;
	char *buff;
	buff = (char *)malloc(sizeof(char)*l);
	if(!buff)
	{
		perror("malloc");
		exit(EXIT_FAILURE);
	}

	printf("the master arraay is -----> %s\n",m);
	printf("the final legth of masterarray is---------------------->%d\n",l);

        preserve_masterarray(m,l);	
	fd2 = open(str,O_RDONLY);
	count=lseek(fd2,0,SEEK_END);
	lseek(fd2,0,SEEK_SET);

	val=(count*0.75);
	if(count%8 != 0)
	val = val+1;
	printf("the no. of characters in actual file is & the encrypted file will be---------------------->%d & %d\n",count,val);
	
	fd4 = open("encrypted_file",O_RDWR | O_CREAT);
	d=0,w=0;
	while(1)
	{
		if(i==0 || x==0)
		{
			byte= byte^byte;
		}
		if(i==0 || i==1 || i==3 || i==5 )
		{
			eof=read(fd2,&ch1,1);
			printf("the ch1----->%c\n",ch1);
			loc = findloc(ch1,m,l);
			printf("the %cth location is--------->%d\n",ch1,loc);
			n = loc;
			if(eof==1)
			{	
				w++;
				printf(" the %d th character is read from file\n",w);	
			}
		}
		if( eof == 0)
		{
			if(i>0 && d<val)
			{
				write(fd4,&byte,1);
				printf("the last byte is written to the file is-------------------->%c && %d\n",byte,byte);
				d++;
			}
			break;
		}


		if(i==0)
		{
			n = n << 2;
			byte = byte | n;	
		}
		if(i==1)
		{
			new = n;
			n = n << 2;
			n = n >> 6;
			byte = byte | n;	
		}
		if(i==2)
		{
			new = new << 4;
			byte = byte | new;
		}
		if(i==3)
		{
			new = n;
			n = n << 2;
			n = n >> 4;
			byte = byte | n;	
		}
		if(i==4)
		{
			new = new << 6;
			byte = byte | new;	
		}
		if(i==5)
		{
			n = n << 2;
			n = n >> 2;
			byte = byte | n;	
		}
		
		if(i==1 || i==3 || i==5)
		{
			if(d<val)
			{
				write(fd4,&byte,1);
				x=0;
				d++;
				printf("the byte is written to the file is-------------------->%c && %d && %d\n",byte,byte,d);
			}
		}
		else
		x=1;
		printf("value of i ----------------------------------->>>>>>>>%d\n",i);
		i++;
		if(i==6)
		i=0;
		


	}
	printf("fd2-----> %d\n fd4-------->%d\n",fd2,fd4);

	lseek(fd4,0,SEEK_SET);
	read(fd4,buff,l);
	printf("the encryption code is -------->%s\n",buff);
	close(fd4);
	close(fd2);
	return 0;
}

@


1.7
log
@including a special variable eof foe multiple lines compression.
@
text
@d9 1
a9 1
	int loc,d,x;
@


1.6
log
@*** empty log message ***
@
text
@d43 1
a43 1
			g=read(fd2,&ch1,1);
d48 1
a48 1
			if(g=1)
d54 1
a54 1
		if( ch1 == 10)
@


1.5
log
@*** empty log message ***
@
text
@d11 1
a11 1
	char byte;
@


1.4
log
@introduce the first code
@
text
@d99 1
a99 1
			byte = byte | n	
@


1.3
log
@*** empty log message ***
@
text
@d1 1
a1 1
//this is compression  of 4 byte
d4 1
a4 1
int compression6()
d6 124
a129 2
	printf("in function ------> %s\n", __func__);
	return 0;	
d131 1
@


1.2
log
@*** empty log message ***
@
text
@d3 1
@


1.1
log
@Initial revision
@
text
@d5 1
a5 1
	printf("in function ------> %s", __func__);
@
