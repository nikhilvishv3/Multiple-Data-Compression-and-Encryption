head	1.38;
access;
symbols;
locks
	nvishvkarma:1.38; strict;
comment	@ * @;


1.38
date	2017.02.09.00.52.26;	author root;	state Exp;
branches;
next	1.37;

1.37
date	2017.02.08.03.29.10;	author root;	state Exp;
branches;
next	1.36;

1.36
date	2017.02.08.03.27.53;	author root;	state Exp;
branches;
next	1.35;

1.35
date	2017.02.05.06.48.37;	author root;	state Exp;
branches;
next	1.34;

1.34
date	2017.01.25.06.00.20;	author root;	state Exp;
branches;
next	1.33;

1.33
date	2016.07.24.08.57.42;	author root;	state Exp;
branches;
next	1.32;

1.32
date	2016.07.24.08.56.29;	author root;	state Exp;
branches;
next	1.31;

1.31
date	2016.07.22.16.02.49;	author root;	state Exp;
branches;
next	1.30;

1.30
date	2016.07.22.11.37.09;	author root;	state Exp;
branches;
next	1.29;

1.29
date	2016.07.22.11.06.13;	author root;	state Exp;
branches;
next	1.28;

1.28
date	2016.07.19.07.56.02;	author root;	state Exp;
branches;
next	1.27;

1.27
date	2016.07.19.07.42.33;	author root;	state Exp;
branches;
next	1.26;

1.26
date	2016.07.18.12.36.06;	author root;	state Exp;
branches;
next	1.25;

1.25
date	2016.07.18.12.30.16;	author root;	state Exp;
branches;
next	1.24;

1.24
date	2016.07.18.12.12.43;	author root;	state Exp;
branches;
next	1.23;

1.23
date	2016.07.18.09.27.14;	author root;	state Exp;
branches;
next	1.22;

1.22
date	2016.07.18.07.31.51;	author root;	state Exp;
branches;
next	1.21;

1.21
date	2016.07.18.07.31.07;	author root;	state Exp;
branches;
next	1.20;

1.20
date	2016.07.18.07.27.28;	author root;	state Exp;
branches;
next	1.19;

1.19
date	2016.07.18.07.26.50;	author root;	state Exp;
branches;
next	1.18;

1.18
date	2016.07.18.07.22.21;	author root;	state Exp;
branches;
next	1.17;

1.17
date	2016.07.18.07.20.36;	author root;	state Exp;
branches;
next	1.16;

1.16
date	2016.07.18.06.55.10;	author root;	state Exp;
branches;
next	1.15;

1.15
date	2016.07.18.06.47.19;	author root;	state Exp;
branches;
next	1.14;

1.14
date	2016.07.18.06.45.25;	author root;	state Exp;
branches;
next	1.13;

1.13
date	2016.07.18.06.41.04;	author root;	state Exp;
branches;
next	1.12;

1.12
date	2016.07.18.06.22.25;	author root;	state Exp;
branches;
next	1.11;

1.11
date	2016.07.18.06.19.28;	author root;	state Exp;
branches;
next	1.10;

1.10
date	2016.07.17.17.06.56;	author root;	state Exp;
branches;
next	1.9;

1.9
date	2016.07.17.17.03.34;	author root;	state Exp;
branches;
next	1.8;

1.8
date	2016.07.17.10.47.13;	author root;	state Exp;
branches;
next	1.7;

1.7
date	2016.07.17.10.43.45;	author root;	state Exp;
branches;
next	1.6;

1.6
date	2016.07.17.10.26.18;	author root;	state Exp;
branches;
next	1.5;

1.5
date	2016.07.17.08.05.51;	author root;	state Exp;
branches;
next	1.4;

1.4
date	2016.07.17.08.01.14;	author root;	state Exp;
branches;
next	1.3;

1.3
date	2016.07.17.07.51.11;	author root;	state Exp;
branches;
next	1.2;

1.2
date	2016.07.17.07.44.12;	author root;	state Exp;
branches;
next	1.1;

1.1
date	2016.07.16.04.13.53;	author root;	state Exp;
branches;
next	;


desc
@@


1.38
log
@including a special variable eof for multiples lines compression.
@
text
@// this is create array function

#include"header.h"
#include"prototype.h"
char *createarray(int fd)
{
	char ch;
	int flag;
	char *ma;
	char *p;
	int length,eof;
	ma = (char *)malloc(sizeof(char)*1);
	printf("in function----->  %s\n",__func__);
	while(1)
	{
		flag = 1;
		eof=read(fd,&ch,1);
		printf("the character read is -----> %c\n",ch);
		if(eof==0)
		break;
		flag = unique(ma,ch);
		if (flag)
		p = insert(ma,ch);
	}
	close(fd);
	return p;

}
@


1.37
log
@*** empty log message ***
@
text
@d11 1
a11 1
	int length;
d17 1
a17 1
		read(fd,&ch,1);
d19 1
a19 1
		if(ch==10)
@


1.36
log
@*** empty log message ***
@
text
@d2 1
d17 1
a17 1
		eof=read(fd,&ch,1);
@


1.35
log
@*** empty log message ***
@
text
@d10 1
a10 1
	int length,eof;
d18 1
a18 1
		if(eof  == 0)
@


1.34
log
@*** empty log message ***
@
text
@d10 1
a10 1
	int length;
d16 1
a16 1
		read(fd,&ch,1);
d18 1
a18 1
		if(ch  == 10)
@


1.33
log
@*** empty log message ***
@
text
@d3 1
d12 1
a12 3
//	*ma = NULL;
	 printf("in function----->  %s\n",__func__);
//         printf("the length of ma is ------> %d\n",strlen(ma));
@


1.32
log
@*** empty log message ***
@
text
@d11 1
a11 1
	*ma = NULL;
d23 1
a23 1
		*p = insert(ma,ch);
@


1.31
log
@*** empty log message ***
@
text
@d23 1
a23 1
		p = insert(ma,ch);
@


1.30
log
@*** empty log message ***
@
text
@d11 1
a11 1
	*ma == NULL;
@


1.29
log
@*** empty log message ***
@
text
@d3 1
a3 1
char * createarray(int fd)
@


1.28
log
@*** empty log message ***
@
text
@d3 1
a3 1
int createarray(int fd)
d8 1
d23 1
a23 1
		length = insert(ma,ch);
d26 1
a26 1
	return length;
@


1.27
log
@*** empty log message ***
@
text
@a22 1
		printf("the masterarray is------> %s\n",ma);
@


1.26
log
@*** empty log message ***
@
text
@d8 1
d22 1
a22 1
		insert(ma,ch);
a24 1
	return 0;
d26 2
@


1.25
log
@*** empty log message ***
@
text
@d7 3
a9 2
	char *ma==NULL;
//	ma = (char *)malloc(sizeof(char)*1);
@


1.24
log
@*** empty log message ***
@
text
@d7 2
a8 2
	char *ma;
	ma = (char *)malloc(sizeof(char)*1);
d10 1
a10 1
         printf("the length of ma is ------> %d\n",strlen(ma));
d24 1
@


1.23
log
@enable null memory after every insertion
@
text
@d6 3
a8 4
	int count=0;
	int flag=0;
	char *ma=NULL;
	//ma = (char *)malloc(sizeof(char)*1);
d10 1
a10 1

d13 1
d18 4
a21 12
		flag = unique(ma,ch,count);
		if(flag)
		{
			printf("INSERTING A CHARACTER\n");
			ma=realloc(ma,count+2);	
			*(ma+count)=ch;
			*(ma+count+1)='\0';
			printf("the length of ma is ------> %d\n",strlen(ma));
			printf("the master array is-----> %s\n",ma);
			count++;
		}
		
a22 3

	printf("the masterarray is------> %s\n",ma);
	close(fd);
@


1.22
log
@*** empty log message ***
@
text
@d22 1
a22 1
			ma=realloc(ma,count+1);	
d24 1
d31 1
a31 1
	*(ma+count)='\0';
@


1.21
log
@*** empty log message ***
@
text
@d25 1
a25 1
			printf("the master array is-----> %s",ma);
@


1.20
log
@*** empty log message ***
@
text
@d25 1
@


1.19
log
@*** empty log message ***
@
text
@d21 1
a21 1
			printf("INSERTING A CHARACTER");
@


1.18
log
@*** empty log message ***
@
text
@d21 1
@


1.17
log
@*** empty log message ***
@
text
@a23 1
			printf("the masterarray is------> %s\n",ma);
d29 1
a29 1

@


1.16
log
@*** empty log message ***
@
text
@d24 1
d30 1
a30 1
	printf("the masterarray is------> %s\n",ma);
@


1.15
log
@*** empty log message ***
@
text
@d11 1
a11 1
        // printf("the length of ma is ------> %d\n",strlen(ma));
d23 1
@


1.14
log
@*** empty log message ***
@
text
@a25 1
		printf("the masterarray is------> %s\n",ma);
d27 2
@


1.13
log
@*** empty log message ***
@
text
@d7 1
d11 1
a11 1
         printf("the length of ma is ------> %d\n",strlen(ma));
@


1.12
log
@*** empty log message ***
@
text
@d5 2
a6 2
	unsigned char ch;
	int flag;
d8 1
a8 1
	ma = (char *)malloc(sizeof(char)*1);
a12 1
		flag = 1;
d17 8
a24 3
		flag = unique(ma,ch);
		if (flag)
		insert(ma,ch);
@


1.11
log
@*** empty log message ***
@
text
@d8 1
a8 1
//	ma = (char *)malloc(sizeof(char)*1);
@


1.10
log
@*** empty log message ***
@
text
@d5 1
a5 1
	char ch;
d7 2
a8 2
	char *ma;
	ma = (char *)malloc(sizeof(char)*1);
@


1.9
log
@*** empty log message ***
@
text
@d23 1
@


1.8
log
@*** empty log message ***
@
text
@d6 1
a6 1
	int flag, i;
a10 1
	i = 0;
d20 2
a21 3
		*ma = insert(ma,ch);
		printf("the masterarray is------> %c\n",*(ma+i));
		i++;
a22 1
	close(fd);
@


1.7
log
@*** empty log message ***
@
text
@d21 1
a21 1
		ma = insert(ma,ch);
@


1.6
log
@*** empty log message ***
@
text
@d6 1
a6 1
	int flag;
d11 1
d21 3
a23 2
		insert(ma,ch);
		printf("the masterarray is------> %s\n",ma);
@


1.5
log
@*** empty log message ***
@
text
@d20 1
a20 1
		insert(ma,ch,fd);
@


1.4
log
@*** empty log message ***
@
text
@d23 1
@


1.3
log
@*** empty log message ***
@
text
@d20 1
a20 1
		insert(ma,ch);
@


1.2
log
@*** empty log message ***
@
text
@d6 1
a6 1
	int flag=1;
d13 1
a13 1
	//	flag = 1;
@


1.1
log
@Initial revision
@
text
@d6 1
a6 1
	int flag;
d13 1
a13 1
		flag = 1;
@
