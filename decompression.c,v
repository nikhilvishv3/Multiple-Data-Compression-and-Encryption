head	1.43;
access;
symbols;
locks
	nvishvkarma:1.43; strict;
comment	@ * @;


1.43
date	2017.01.25.06.00.24;	author root;	state Exp;
branches;
next	1.42;

1.42
date	2016.09.18.09.24.53;	author root;	state Exp;
branches;
next	1.41;

1.41
date	2016.09.18.09.18.24;	author root;	state Exp;
branches;
next	1.40;

1.40
date	2016.09.18.09.07.08;	author root;	state Exp;
branches;
next	1.39;

1.39
date	2016.09.18.09.06.30;	author root;	state Exp;
branches;
next	1.38;

1.38
date	2016.09.18.09.00.46;	author root;	state Exp;
branches;
next	1.37;

1.37
date	2016.09.18.08.59.17;	author root;	state Exp;
branches;
next	1.36;

1.36
date	2016.09.18.07.58.48;	author root;	state Exp;
branches;
next	1.35;

1.35
date	2016.09.18.07.22.52;	author root;	state Exp;
branches;
next	1.34;

1.34
date	2016.09.18.07.17.02;	author root;	state Exp;
branches;
next	1.33;

1.33
date	2016.09.18.06.53.48;	author root;	state Exp;
branches;
next	1.32;

1.32
date	2016.09.18.06.50.59;	author root;	state Exp;
branches;
next	1.31;

1.31
date	2016.09.18.06.36.15;	author root;	state Exp;
branches;
next	1.30;

1.30
date	2016.09.18.05.31.08;	author root;	state Exp;
branches;
next	1.29;

1.29
date	2016.09.17.15.28.16;	author root;	state Exp;
branches;
next	1.28;

1.28
date	2016.08.08.08.34.28;	author root;	state Exp;
branches;
next	1.27;

1.27
date	2016.08.08.08.30.56;	author root;	state Exp;
branches;
next	1.26;

1.26
date	2016.08.08.08.23.01;	author root;	state Exp;
branches;
next	1.25;

1.25
date	2016.08.07.19.33.24;	author root;	state Exp;
branches;
next	1.24;

1.24
date	2016.08.07.19.29.48;	author root;	state Exp;
branches;
next	1.23;

1.23
date	2016.08.07.19.28.20;	author root;	state Exp;
branches;
next	1.22;

1.22
date	2016.08.07.19.26.17;	author root;	state Exp;
branches;
next	1.21;

1.21
date	2016.08.07.19.17.31;	author root;	state Exp;
branches;
next	1.20;

1.20
date	2016.08.07.19.15.11;	author root;	state Exp;
branches;
next	1.19;

1.19
date	2016.08.07.16.18.20;	author root;	state Exp;
branches;
next	1.18;

1.18
date	2016.08.07.16.11.29;	author root;	state Exp;
branches;
next	1.17;

1.17
date	2016.08.07.16.10.21;	author root;	state Exp;
branches;
next	1.16;

1.16
date	2016.08.07.16.05.19;	author root;	state Exp;
branches;
next	1.15;

1.15
date	2016.08.07.15.58.20;	author root;	state Exp;
branches;
next	1.14;

1.14
date	2016.08.07.15.56.46;	author root;	state Exp;
branches;
next	1.13;

1.13
date	2016.08.07.15.55.27;	author root;	state Exp;
branches;
next	1.12;

1.12
date	2016.08.07.10.23.12;	author root;	state Exp;
branches;
next	1.11;

1.11
date	2016.08.07.10.22.18;	author root;	state Exp;
branches;
next	1.10;

1.10
date	2016.08.07.10.20.02;	author root;	state Exp;
branches;
next	1.9;

1.9
date	2016.08.07.10.18.54;	author root;	state Exp;
branches;
next	1.8;

1.8
date	2016.08.07.10.16.41;	author root;	state Exp;
branches;
next	1.7;

1.7
date	2016.08.07.10.14.15;	author root;	state Exp;
branches;
next	1.6;

1.6
date	2016.08.07.09.54.47;	author root;	state Exp;
branches;
next	1.5;

1.5
date	2016.08.07.07.14.10;	author root;	state Exp;
branches;
next	1.4;

1.4
date	2016.08.07.07.11.26;	author root;	state Exp;
branches;
next	1.3;

1.3
date	2016.08.07.04.54.56;	author root;	state Exp;
branches;
next	1.2;

1.2
date	2016.08.07.04.49.28;	author root;	state Exp;
branches;
next	1.1;

1.1
date	2016.07.16.04.14.04;	author root;	state Exp;
branches;
next	;


desc
@decompress the data
@


1.43
log
@*** empty log message ***
@
text
@// this is decompression function
#include"header.h"
#include"prototype.h"
int decompression()
{
	printf("in function ----->%s\n",__func__);
	int fd,ndc,l;
	fd = open("compression",O_RDONLY);
	printf("fd is--------->%d",fd);
	ndc=lseek(fd,0,SEEK_END);
	l = codelength(ndc);
	printf("the length of master arry for codelength is ----%d\n",ndc);	
	printf("the codelength is ---->%d\n",l);
	switch(l)
	{
		case 2:
			decompression2();
			break;
		case 3:
			decompression3();
			break;
		case 4:
			decompression4();
			break;
		case 5:
			decompression5();
			break;
		case 6:
			decompression6();
			break;
		case 7:
			decompression7();
			break;
		default:
			printf("\"This file cannot be decompressed or may be some error\"");
			break;
	}
	return 0;
}

@


1.42
log
@*** empty log message ***
@
text
@d3 1
@


1.41
log
@*** empty log message ***
@
text
@d5 1
d8 4
a11 2
	ndc = lseek(fd,SEEK_END,0);
	l = codelength(ndc);	
@


1.40
log
@*** empty log message ***
@
text
@d3 1
a3 1
int decompression(int l)
d5 4
@


1.39
log
@*** empty log message ***
@
text
@a4 1
	int l;
@


1.38
log
@*** empty log message ***
@
text
@d5 2
@


1.37
log
@*** empty log message ***
@
text
@d10 1
a10 1
		case 3;
d16 1
a16 1
		case 5;
d22 1
a22 1
		case 7;
@


1.36
log
@*** empty log message ***
@
text
@d3 1
a3 1
int decompression()
d5 1
a5 7
	unsigned char *buff=NULL,ch,c,d;
	char str[10];
	unsigned int efd,fd2,fd3,i=0,count,count1,length,j,n,r;
	c = c ^ c;
/*	printf("in func %s\n",__func__);
	//buff = (char *)malloc(sizeof(char)*1);
	if(!buff)
d7 21
a27 60
		perror("malloc");
		exit(EXIT_FAILURE);
	}
	printf("enter the file u want to decompress\n");
	scanf("%s",&str);
	printf("you enterd the file is----->%s\n",str);
	fd=open(str,O_RDONLY);
	fd2=open("compression",O_RDONLY);
	while(1)
	{
		read(fd2,&buff,1);
		buff=realloc(buff,(i+1));
		*(buff+i+1) = '\0';
		if(*(buff+i) == 10 )
		break;
		i++;
	}
	printf("the master arry is ------>%s\n",buff);
	
*/	

	efd=open("compression",O_RDONLY);
	printf("efd is : %d\n",efd);
	count=lseek(efd,0,SEEK_END);
	printf("count is : %d\n",count);
	buff=(char*)malloc(sizeof(char)*(count));
	lseek(efd,0,SEEK_SET);
	count1=read(efd,buff,(count));
	printf("master array is : %s\n and count1: %d\n",buff,count1);
	fd2=open("encrypted_file",O_RDONLY);
	if(fd2!=0)
	printf("ENCRYPTED FILE IS OPENED\n");
	fd3=open("compressed_file",O_RDWR | O_CREAT);
	if(fd3!=0)
	{
		printf("main file is opened\n");
	}
	length=lseek(fd2,0,SEEK_END);
	printf("the total characters in actuall file------>%d \n",length);
	lseek(fd2,0,SEEK_SET);
	for(i=0;i<(length-1);i++)
	{
		r =read(fd2,&ch,1);
		if(r!=1)
		printf("character is not read......oops!!\n");
		c = ch;
		d = ch;
		c = c >> 4;
		d = d << 4;
		d = d >> 4;
	//	sprintf(&n,"%d",c);
		printf("the locationn is ------>%d\n",c);
	//	printf("c --->%d\n",c);
		write(fd3,(buff+c),1);
		printf("the written charracter is %c\n",*(buff+c));
		sprintf(&n,"%d",d);
		printf("the location is -------->%d\n",d);
		write(fd3,(buff+d),1);
		printf("the written character is %c\n",*(buff+d));
		sleep(1);
a29 1
	
@


1.35
log
@*** empty log message ***
@
text
@d66 1
a66 1
		write(fd3,(buff+n),1);
d70 1
a70 1
		write(fd3,(buff+n),1);
@


1.34
log
@*** empty log message ***
@
text
@d58 2
a59 2
		c = c ^ ch;
		d = c ^ ch;
d63 2
a64 2
		sprintf(&n,"%d",c);
		printf("the locationn is ------>%d\n",n);
d67 1
a67 1
		printf("the written charracter is %c\n",*(buff+n));
d69 1
a69 1
		printf("the location is -------->%d\n",n);
d71 1
a71 1
		printf("the written character is %c\n",*(buff+n));
@


1.33
log
@apply *(buff+n) instead of (buff+n) in orinting
@
text
@d67 1
a67 1
		printf("the written charracter is %c\n",*(buff+3));
@


1.32
log
@*** empty log message ***
@
text
@d67 1
a67 1
		printf("the written charracter is %c\n",(buff+3));
d71 1
a71 1
		printf("the written character is %c\n",(buff+n));
@


1.31
log
@replace while(1) loop by for loop and rub the exit condition
@
text
@d5 1
a5 1
	char *buff=NULL,ch,c,d;
d65 1
a65 1
		printf("c --->%d\n",c);
d67 1
a67 1
		printf("the written charracter is %c\n",(buff+n));
@


1.30
log
@replace count-1 by simply count
@
text
@d53 1
a53 2
//	for(i=0;i<(length-1);i++)
	while(1)
a71 2
		if(ch == 10)
		break;
@


1.29
log
@*** empty log message ***
@
text
@d38 1
a38 1
	buff=(char*)malloc(sizeof(char)*(count-1));
d40 1
a40 1
	count1=read(efd,buff,(count-1));
@


1.28
log
@*** empty log message ***
@
text
@d7 1
a7 1
	int efd,fd2,fd3,i=0,count,count1,length,j,n,r;
d63 1
d65 1
d70 1
a71 1
		printf("lower bit is ---->%c\n upper bit is ----->%c\n",c,d);
@


1.27
log
@*** empty log message ***
@
text
@d53 2
a54 1
	for(i=0;i<(length-1);i++)
@


1.26
log
@*** empty log message ***
@
text
@d62 1
a62 1
		sprintf(&n,"%c",c);
d66 1
a66 1
		sprintf(&n,"%c",d);
@


1.25
log
@*** empty log message ***
@
text
@d62 1
a62 1
	//	sprintf(&n,"%c",c);
@


1.24
log
@*** empty log message ***
@
text
@d62 2
a63 1
		extern int sprintf(&n,"%c",c);
d66 1
a66 1
		extern int sprintf(&n,"%c",d);
@


1.23
log
@*** empty log message ***
@
text
@d62 1
a62 1
		sprintf(&n,"%c",c);
d65 1
a65 1
		sprintf(&n,"%c",d);
@


1.22
log
@*** empty log message ***
@
text
@d62 1
a62 1
		sprintf(n,"%c",&c);
@


1.21
log
@*** empty log message ***
@
text
@d62 1
a62 1
		sprintf(&n,"%c",c);
@


1.20
log
@*** empty log message ***
@
text
@a61 1
		printf("lower bit is ---->%c\n upper bit is ----->%c\n",c,d);
d67 1
@


1.19
log
@*** empty log message ***
@
text
@d41 1
a41 1
	printf("ma is : %s and count1: %d\n",buff,count1);
d62 1
@


1.18
log
@*** empty log message ***
@
text
@d57 1
a57 1
		printf("character is not read......oops!!");
d64 1
d67 1
d70 1
@


1.17
log
@*** empty log message ***
@
text
@d7 1
a7 1
	int efd,fd2,fd3,i=0,count,count1,length,j,n;
@


1.16
log
@*** empty log message ***
@
text
@d53 1
a53 1
	while(i<(length-1));
d55 3
a57 1
		read(fd2,&ch,1);
d66 2
a67 1
		i++;
@


1.15
log
@*** empty log message ***
@
text
@d46 4
d51 1
@


1.14
log
@*** empty log message ***
@
text
@d7 1
a7 1
	int efd,fd2,i=0,count,count1,length,j,n;
@


1.13
log
@*** empty log message ***
@
text
@d7 1
a7 1
	int efd,fd2,i=0,count,count1,length,j;
@


1.12
log
@*** empty log message ***
@
text
@d5 1
a5 1
	char *buff=NULL;
d7 2
a8 1
	int efd,fd2,i=1,count,count1;
d42 19
@


1.11
log
@*** empty log message ***
@
text
@d38 1
@


1.10
log
@*** empty log message ***
@
text
@d7 1
a7 1
	int efd,fd2,i=1,count;
@


1.9
log
@*** empty log message ***
@
text
@d38 2
a39 2
	read(efd,buff,(count-1));
	printf("ma is : %s\n",buff);
@


1.8
log
@*** empty log message ***
@
text
@d37 3
@


1.7
log
@*** empty log message ***
@
text
@d7 1
a7 1
	int efd,fd2,i=1;
d35 2
@


1.6
log
@*** empty log message ***
@
text
@d5 5
a9 4
	char *buff,str[10];
	int fd,fd2,i=1;
	printf("in func %s\n",__func__);
	buff = (char *)malloc(sizeof(char)*1);
d31 4
a34 1
	
@


1.5
log
@*** empty log message ***
@
text
@d9 5
@


1.4
log
@*** empty log message ***
@
text
@d9 1
a9 1
	printf("enter the file u want to decompress\n",);
d11 1
a11 1
	printf("you enterd the file is----->%s",str);
d17 1
a17 1
		realloc(buff,(i+1));
@


1.3
log
@*** empty log message ***
@
text
@d1 1
a1 1
// this is compression function
d5 20
a25 1
	printf("in func %s",__func__);
@


1.2
log
@*** empty log message ***
@
text
@d3 1
a3 1
int decompression(char *p)
a6 1
	printf("the master array is %s\n",p);
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
int decompression()
d7 1
@
